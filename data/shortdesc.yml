NOP: Do nothing
MOV: Move value
MOVBYTS: Swizzle bytes in register
SETS: Set S field
SETD: Set D field
SETR: Set R field
LOC: Load address
ROR: Rotate bits right
ROL: Rotate bits left
SHR: Shift bits right
SHL: Shift bits left
SAR: Shift arithmetic right
SAL: Rarely useful
RCR: Rotate carry right
RCL: Rotate carry left
SIGNX: Sign-extend
ZEROX: Zero-extend
ONES: Population count
ENCOD: Find highest set bit
DECOD: Get Nth power of 2
BMASK: Get mask of lower N bits
ADD: Unsigned add
ADDS: Signed add
ADDX: Unsigned add with carry
ADDSX: Signed add with carry
SUB: Unsigned subtract
SUBS: Signed subtract
SUBX: Unsigned subtract with borrow
SUBSX: Signed subtract with borrow
SUBR: Reverse subtract
CMP: Unsigned compare
CMPS: Signed compare
CMPX: Unsigned compare with borrow
CMPSX: Signed compare with borrow
CMPR: Reverse compare
CMPSUB: Compare and subtract
ABS: Absolute value
NEG: Negate value
MUL: Unsigned 16-bit multiply
MULS: Signed 16-bit multiply
REV: Reverse bits
SPLITB: Split nibble bits into bytes
MERGEB: Merge bytes into nibbles
SPLITW: Split odd/even bits into high/low words
MERGEW: Merge high/low words into odd/even bits
RGBSQZ: Convert RGB24 to RGB16
RGBEXP: Convert RGB16 to RGB24
TEST: Test bit pattern
TESTN: Test bit pattern (negative)
NOT: Bitwise NOT
AND: Bitwise AND
ANDN: Bitwise AND (negative)
OR: Bitwise OR
XOR: Bitwise XOR
TESTB: Test bit
TESTBN: Test bit (negative)
TESTB-AND: Test bit (AND with current flag)
TESTBN-AND: Test bit (negative, AND with current flag)
TESTB-OR: Test bit (OR with current flag)
TESTBN-OR: Test bit (negative, OR with current flag)
TESTB-XOR: Test bit (XOR with current flag)
TESTBN-XOR: Test bit (negative, XOR with current flag)
TESTP: Test pin
TESTPN: Test pin (negative)
TESTP-AND: Test pin (AND with current flag)
TESTPN-AND: Test pin (negative, AND with current flag)
TESTP-OR: Test pin (OR with current flag)
TESTPN-OR: Test pin (negative, OR with current flag)
TESTP-XOR: Test pin (XOR with current flag)
TESTPN-XOR: Test pin (negative, XOR with current flag)
BITL: Clear bit(s)
BITH: Set bit(s)
BITNOT: Toggle bit(s)
BITRND: Randomize bit(s)
BITC: Set bit(s) to C
BITNC: Set bit(s) to !C
BITZ: Set bit(s) to Z
BITNZ: Set bit(s) to !Z
RDFAST: Start FIFO read
WRFAST: Start FIFO write
GETPTR: Get current FIFO position
RFBYTE: Read byte from FIFO
RFWORD: Read word from FIFO
RFLONG: Read long from FIFO
RFVAR: Read variable-length value from FIFO (unsigned)
RFVARS: Read variable-length value from FIFO (signed)
WFBYTE: Write byte to FIFO
WFWORD: Write word to FIFO
WFLONG: Write long to FIFO
RDBYTE: Read byte from Hub
RDWORD: Read word from Hub
RDLONG: Read long from Hub
WRBYTE: Write byte to Hub
WRWORD: Write word to Hub
WRLONG: Write long to Hub
WMLONG: Write non-zero bytes to Hub
RDLUT: Read long from LUT
WRLUT: Write long to LUT
SETLUTS: Configure LUT RAM
GETQX: Get CORDIC result X
GETQY: Get CORDIC result Y
QMUL: Unsigned 32-bit multiply
QDIV: Unsigned divide
QFRAC: Unsigned divide (fractional)
QSQRT: Square root
QLOG: Fixed-point logarithm
QEXP: Fixed-point exponent
QROTATE: Rotate 2D vector
QVECTOR: Angle and length of 2D vector
AUGD: "Augment next #D immediate"
AUGS: "Augment next #S immediate"
GETCT: Get global cycle counter
WAITX: Wait X cycles
GETRND: Get random number
PUSH: Push long on internal stack
POP: Pop long off internal stack
ADDPIX: Add colors
MULPIX: Multiply colors
BLNPIX: Blend between colors
MIXPIX: Generic color mixing operation
SETPIV: Set blend factor
SETPIX: Configure MIXPIX
INCMOD: Increment with modulus
DECMOD: Decrement with modulus
FGE: Limit minimum (unsigned)
FGES: Limit minimum (signed)
FLE: Limit maximum (unsigned)
FLES: Limit maximum (signed)
SEUSSF: Scramble bits (forward)
SEUSSR: Scramble bits (reverse)
RCZL: Rotate flags left
RCZR: Rotate flags right
MUXNIBS: Copy non-zero nibbles
MUXNITS: Copy non-zero bit pairs
WRC: Get C into register
WRNC: Get !C into register
WRZ: Get Z into register
WRNZ: Get !Z into register
SETQ: Set Q Register and flag
SETQ2: Set Q Register and alternate flag
XORO32: Generate pseudo-random number
NEGC: Negate if C
NEGNC: Negate if !C
NEGZ: Negate if Z
NEGNZ: Negate if !Z
ALTS: Indirect source
ALTD: Indirect destination
ALTR: Indirect result
ALTB: Indirect bit
ALTGN: Indirect GETNIB
ALTGB: Indirect GETBYTE
ALTGW: Indirect GETWORD
ALTSN: Indirect SETNIB
ALTSB: Indirect SETBYTE
ALTSW: Indirect SETWORD
ALTI: Complex indirect
JMP-A: Jump
JMP-D: Jump (indirect)
JMPREL: Jump relative
RET: Return from subroutine
TJZ: Test and jump if zero
TJNZ: Test and jump if not zero
TJF: Test and jump if full
TJNF: Test and jump if not full
TJS: Test and jump if negative
TJNS: Test and jump if positive
TJV: Test and jump if signed overflow occurred
DJZ: Decrement and jump if zero
DJNZ: Decrement and jump if not zero
DJF: Decrement and jump if borrow
DJNF: Decrement and jump if no borrow
IJZ: Increment and jump if zero
IJNZ: Increment and jump if not zero